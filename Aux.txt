proc ___build___Object {
class_size = 1
C = C + 1
stack[C] = class_size
call malloc
instance_address = stack[C]
C = C - 1
heap[instance_address] = 0
C = C + 1
stack[C] = instance_address
}
proc ___build___String {
class_size = 2
C = C + 1
stack[C] = class_size
call malloc
instance_address = stack[C]
C = C - 1
heap[instance_address] = 1
C = C + 1
stack[C] = instance_address
C = C + 1
stack[C] = 0
t1 = stack[C]
C = C - 1
instance_address = stack[C]
C = C - 1
t4 = instance_address + 1
heap[t4] = t1
C = C + 1
stack[C] = instance_address
}
proc ___build___Main {
class_size = 2
C = C + 1
stack[C] = class_size
call malloc
instance_address = stack[C]
C = C - 1
heap[instance_address] = 2
C = C + 1
stack[C] = instance_address
C = C + 1
stack[C] = 0
t1 = stack[C]
C = C - 1
instance_address = stack[C]
C = C - 1
t4 = instance_address + 1
heap[t4] = t1
C = C + 1
stack[C] = instance_address
}
proc load_default_chars {
t1 = 0
heap[t1] = 48
t1 = 1
heap[t1] = 49
t1 = 2
heap[t1] = 50
t1 = 3
heap[t1] = 51
t1 = 4
heap[t1] = 52
t1 = 5
heap[t1] = 53
t1 = 6
heap[t1] = 54
t1 = 7
heap[t1] = 55
t1 = 8
heap[t1] = 56
t1 = 9
heap[t1] = 57
}
proc load_all_class_names {
class_names_segment = 3
C = C + 1
stack[C] = class_names_segment
call malloc
class_names_segment = stack[C]
C = C - 1
i = 0
C = C + 1
stack[C] = 7
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 6
t2 = t4 + 1
heap[t2] = 79
t2 = t4 + 2
heap[t2] = 98
t2 = t4 + 3
heap[t2] = 106
t2 = t4 + 4
heap[t2] = 101
t2 = t4 + 5
heap[t2] = 99
t2 = t4 + 6
heap[t2] = 116
t1 = stack[C]
C = C - 1
t2 = i + class_names_segment
heap[t2] = t1
i = i + 1
C = C + 1
stack[C] = 7
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 6
t2 = t4 + 1
heap[t2] = 83
t2 = t4 + 2
heap[t2] = 116
t2 = t4 + 3
heap[t2] = 114
t2 = t4 + 4
heap[t2] = 105
t2 = t4 + 5
heap[t2] = 110
t2 = t4 + 6
heap[t2] = 103
t1 = stack[C]
C = C - 1
t2 = i + class_names_segment
heap[t2] = t1
i = i + 1
C = C + 1
stack[C] = 5
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 4
t2 = t4 + 1
heap[t2] = 77
t2 = t4 + 2
heap[t2] = 97
t2 = t4 + 3
heap[t2] = 105
t2 = t4 + 4
heap[t2] = 110
t1 = stack[C]
C = C - 1
t2 = i + class_names_segment
heap[t2] = t1
i = i + 1
}
proc get_field {
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
if t2 != 0 goto L1
exit(0)
L1:
t3 = heap[t2]
if t3 != 0 goto L3
L3:
if t3 != 1 goto L4
if t1 != 0 goto L5
t1 = t2 + 1
t1 = heap[t1]
C = C + 1
stack[C] = t1
goto L2
L5:
L4:
if t3 != 2 goto L6
if t1 != 1 goto L7
t1 = t2 + 1
t1 = heap[t1]
C = C + 1
stack[C] = t1
goto L2
L7:
L6:
L2:
}
proc get_field_reference {
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
if t2 != 0 goto L8
exit(0)
L8:
t3 = heap[t2]
if t3 != 0 goto L10
L10:
if t3 != 1 goto L11
if t1 != 0 goto L12
t1 = t2 + 1
C = C + 1
stack[C] = 1
C = C + 1
stack[C] = t1
goto L9
L12:
L11:
if t3 != 2 goto L13
if t1 != 1 goto L14
t1 = t2 + 1
C = C + 1
stack[C] = 1
C = C + 1
stack[C] = t1
goto L9
L14:
L13:
L9:
}
proc get_class {
t1 = stack[C]
C = C - 1
if t1 != 0 goto L15
C = C + 1
stack[C] = 5
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 4
t2 = t4 + 1
heap[t2] = 110
t2 = t4 + 2
heap[t2] = 117
t2 = t4 + 3
heap[t2] = 108
t2 = t4 + 4
heap[t2] = 108
goto L16
L15:
t1 = heap[t1]
t1 = t1 + 10
t1 = heap[t1]
C = C + 1
stack[C] = t1
L16:
}
proc ___downcast___ {
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
t3 = heap[t2]
if t1 == t3 goto L17
C = C + 1
stack[C] = t1
C = C + 1
stack[C] = t3
exit(2)
L17:
C = C + 1
stack[C] = t2
}
proc malloc {
t2 = stack[C]
C = C - 1
t4 = H
H = H + t2
C = C + 1
stack[C] = t4
t3 = 0
L18:
if t3 >= t2 goto L19
t4 = t4 + t3
heap[t4] = 0
t3 = t3 + 1
goto L18
L19:
}
proc string_to_int {
answer = 0
factor = 1
str = stack[C]
C = C - 1
i = heap[str]
sign = 1
strEnd = 0
t1 = str + 1
t1 = heap[t1]
if t1 != 45 goto L20
sign = -1
strEnd = 1
L20:
L21:
if i <= 0 goto L22
t1 = str + i
t1 = heap[t1]
if t1 < 48 goto L23
if t1 > 57 goto L23
goto L24
L23:
exit(3)
L24:
t1 = t1 - 48
t1 = t1 * factor
answer = answer + t1
factor = factor * 10
i = i - 1
goto L21
L22:
answer = answer * sign
C = C + 1
stack[C] = answer
}
proc int_to_string {
a = stack[C]
C = C - 1
C = C + 1
stack[C] = 32
call malloc
str = stack[C]
C = C - 1
i = 32
j = 0
if a < 0 goto L25
isNegative = 0
goto L26
L25:
isNegative = 1
L26:
if a > 0 goto L27
i = i - 1
j = j + 1
t1 = str + i
t2 = a % 10
t2 = t2 * -1
t2 = heap[t2]
heap[t1] = t2
a = a / 10
a = a * -1
decimal_part = a % 1
a = a - decimal_part
L27:
L28:
if a == 0 goto L29
i = i - 1
t1 = str + i
j = j + 1
t2 = a % 10
t2 = heap[t2]
heap[t1] = t2
a = a / 10
decimal_part = a % 1
a = a - decimal_part
goto L28
L29:
if isNegative == 0 goto L30
i = i - 1
t1 = str + i
heap[t1] = 45
L30:
i = i - 1
t1 = str + i
heap[t1] = j
C = C + 1
stack[C] = t1
}
proc ___compareArrays___ {
right_string_address = stack[C]
C = C - 1
left_string_address = stack[C]
C = C - 1
right_size = heap[right_string_address]
left_size = heap[left_string_address]
if left_size == right_size goto L31
C = C + 1
stack[C] = 0
goto L32
L31:
i = 1
L33:
if i > right_size goto L34
right_char_address = right_string_address + i
left_char_address = left_string_address + i
right_char_address = heap[right_char_address]
left_char_address = heap[left_char_address]
if left_char_address == right_char_address goto L35
C = C + 1
stack[C] = 0
goto L32
L35:
i = i + 1
goto L33
L34:
C = C + 1
stack[C] = 1
L32:
}
proc send_this_reference_to_top {
paramCount = stack[C]
C = C - 1
t1 = 0
L36:
if t1 >= paramCount goto L37
t2 = stack[C]
C = C - 1
H = H + 1
heap[H] = t2
t1 = t1 + 1
goto L36
L37:
t3 = stack[C]
C = C - 1
L38:
t1 = 0
if t1 >= paramCount goto L39
t2 = heap[H]
H = H - 1
C = C + 1
stack[C] = t2
goto L38
L39:
C = C + 1
stack[C] = t3
}
proc ___inherit___ {
child = stack[C]
C = C - 1
parent = stack[C]
C = C - 1
child_id = heap[child]
}
proc ___sum_strings___ {
right = stack[C]
C = C - 1
left = stack[C]
C = C - 1
left_size = heap[left]
right_size = heap[right]
result = right_size + 1
result = result + left_size
C = C + 1
stack[C] = result
call malloc
result = stack[C]
C = C - 1
new_size = left_size + right_size
heap[result] = new_size
i = 1
ii = 1
L40:
if i > left_size goto L41
next_char = left + i
next_char = heap[next_char]
t1 = result + ii
heap[t1] = next_char
ii = ii + 1
i = i + 1
goto L40
L41:
i = 1
L42:
if i > right_size goto L43
next_char = right + i
next_char = heap[next_char]
t1 = result + ii
heap[t1] = next_char
ii = ii + 1
i = i + 1
goto L42
L43:
C = C + 1
stack[C] = result
}
proc sum_strings {
C = C + 1
stack[C] = 0
call get_field
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
C = C + 1
stack[C] = t1
C = C + 1
stack[C] = t2
C = C + 1
stack[C] = 0
call get_field
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
C = C + 1
stack[C] = t1
C = C + 1
stack[C] = t2
call ___sum_strings___
call build_string
}
proc compare_strings {
C = C + 1
stack[C] = 0
call get_field
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
C = C + 1
stack[C] = t1
C = C + 1
stack[C] = t2
C = C + 1
stack[C] = 0
call get_field
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
C = C + 1
stack[C] = t1
C = C + 1
stack[C] = t2
call ___compareArrays___
}
proc print_string {
t1 = stack[C]
C = C - 1
t2 = heap[t1]
t3 = 1
L44:
if t3 > t2 goto L45
t4 = t1 + t3
t4 = heap[t4]
print('%c',t4)
t3 = t3 + 1
goto L44
L45:
}
proc build_string {
call ___build___String
t1 = stack[C]
C = C - 1
t4 = stack[C]
C = C - 1
t2 = t1 + 1
heap[t2] = t4
C = C + 1
stack[C] = t1
}
proc boolean_to_string {
t1 = stack[C]
C = C - 1
if t1 == 0 goto L46
C = C + 1
stack[C] = 5
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 4
t2 = t4 + 1
heap[t2] = 116
t2 = t4 + 2
heap[t2] = 114
t2 = t4 + 3
heap[t2] = 117
t2 = t4 + 4
heap[t2] = 101
goto L47
L46:
C = C + 1
stack[C] = 6
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 5
t2 = t4 + 1
heap[t2] = 102
t2 = t4 + 2
heap[t2] = 97
t2 = t4 + 3
heap[t2] = 108
t2 = t4 + 4
heap[t2] = 115
t2 = t4 + 5
heap[t2] = 101
L47:
}
proc ____MAIN____ {
C = 0
C = C + 1
stack[C] = 10
call malloc
t1 = stack[C]
C = C - 1
call load_default_chars
call load_all_class_names
P = 400
P = P + 0
t1 = P - 0
call ___f___3
P = P - 0
}
proc ___f___1 {
t4 = P + 0
C = C + 1
stack[C] = 0
C = C + 1
stack[C] = t4
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
if t2 == 1 goto L49
t1 = stack[t1]
goto L50
L49:
t1 = heap[t1]
L50:
C = C + 1
stack[C] = t1
t1 = 1
C = C + 1
stack[C] = t1
call get_field_reference
t4 = P + 1
t4 = stack[t4]
C = C + 1
stack[C] = t4
t4 = stack[C]
C = C - 1
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
if t2 == 1 goto L52
stack[t1] = t4
goto L51
L52:
heap[t1] = t4
L51:
t4 = P + 0
t4 = stack[t4]
C = C + 1
stack[C] = t4
L48:
}
proc ___f___4 {
C = C + 1
stack[C] = 41
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 40
t2 = t4 + 1
heap[t2] = 84
t2 = t4 + 2
heap[t2] = 104
t2 = t4 + 3
heap[t2] = 101
t2 = t4 + 4
heap[t2] = 32
t2 = t4 + 5
heap[t2] = 101
t2 = t4 + 6
heap[t2] = 113
t2 = t4 + 7
heap[t2] = 117
t2 = t4 + 8
heap[t2] = 97
t2 = t4 + 9
heap[t2] = 108
t2 = t4 + 10
heap[t2] = 115
t2 = t4 + 11
heap[t2] = 32
t2 = t4 + 12
heap[t2] = 102
t2 = t4 + 13
heap[t2] = 117
t2 = t4 + 14
heap[t2] = 110
t2 = t4 + 15
heap[t2] = 99
t2 = t4 + 16
heap[t2] = 116
t2 = t4 + 17
heap[t2] = 105
t2 = t4 + 18
heap[t2] = 111
t2 = t4 + 19
heap[t2] = 110
t2 = t4 + 20
heap[t2] = 32
t2 = t4 + 21
heap[t2] = 105
t2 = t4 + 22
heap[t2] = 115
t2 = t4 + 23
heap[t2] = 32
t2 = t4 + 24
heap[t2] = 119
t2 = t4 + 25
heap[t2] = 111
t2 = t4 + 26
heap[t2] = 114
t2 = t4 + 27
heap[t2] = 107
t2 = t4 + 28
heap[t2] = 105
t2 = t4 + 29
heap[t2] = 110
t2 = t4 + 30
heap[t2] = 103
t2 = t4 + 31
heap[t2] = 32
t2 = t4 + 32
heap[t2] = 112
t2 = t4 + 33
heap[t2] = 114
t2 = t4 + 34
heap[t2] = 111
t2 = t4 + 35
heap[t2] = 112
t2 = t4 + 36
heap[t2] = 101
t2 = t4 + 37
heap[t2] = 114
t2 = t4 + 38
heap[t2] = 108
t2 = t4 + 39
heap[t2] = 121
t2 = t4 + 40
heap[t2] = 33
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
}
proc ___f___6 {
C = C + 1
stack[C] = 6
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 5
t2 = t4 + 1
heap[t2] = 77
t2 = t4 + 2
heap[t2] = 109
t2 = t4 + 3
heap[t2] = 109
t2 = t4 + 4
heap[t2] = 109
t2 = t4 + 5
heap[t2] = 109
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
}
proc ___f___8 {
C = C + 1
stack[C] = 17
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 16
t2 = t4 + 1
heap[t2] = 80
t2 = t4 + 2
heap[t2] = 114
t2 = t4 + 3
heap[t2] = 117
t2 = t4 + 4
heap[t2] = 101
t2 = t4 + 5
heap[t2] = 98
t2 = t4 + 6
heap[t2] = 97
t2 = t4 + 7
heap[t2] = 50
t2 = t4 + 8
heap[t2] = 32
t2 = t4 + 9
heap[t2] = 101
t2 = t4 + 10
heap[t2] = 115
t2 = t4 + 11
heap[t2] = 32
t2 = t4 + 12
heap[t2] = 110
t2 = t4 + 13
heap[t2] = 117
t2 = t4 + 14
heap[t2] = 108
t2 = t4 + 15
heap[t2] = 108
t2 = t4 + 16
heap[t2] = 33
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
t4 = P + 2
t4 = stack[t4]
C = C + 1
stack[C] = 0
C = C + 1
stack[C] = t4
call ___build___Main
C = C + 1
stack[C] = 99
C = C + 1
stack[C] = 1
call send_this_reference_to_top
P = P + 4
t4 = P - 4
t1 = stack[C]
C = C - 1
t2 = P + 0
stack[t2] = t1
t1 = stack[C]
C = C - 1
t2 = P + 1
stack[t2] = t1
call ___f___1
P = P - 4
t4 = stack[C]
C = C - 1
t1 = stack[C]
C = C - 1
t2 = stack[C]
C = C - 1
if t2 == 1 goto L61
stack[t1] = t4
goto L60
L61:
heap[t1] = t4
L60:
}
proc ___f___10 {
C = C + 1
stack[C] = 15
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 14
t2 = t4 + 1
heap[t2] = 72
t2 = t4 + 2
heap[t2] = 101
t2 = t4 + 3
heap[t2] = 108
t2 = t4 + 4
heap[t2] = 108
t2 = t4 + 5
heap[t2] = 111
t2 = t4 + 6
heap[t2] = 32
t2 = t4 + 7
heap[t2] = 119
t2 = t4 + 8
heap[t2] = 111
t2 = t4 + 9
heap[t2] = 114
t2 = t4 + 10
heap[t2] = 108
t2 = t4 + 11
heap[t2] = 100
t2 = t4 + 12
heap[t2] = 33
t2 = t4 + 13
heap[t2] = 33
t2 = t4 + 14
heap[t2] = 10
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
}
proc ___f___12 {
C = C + 1
stack[C] = 14
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 13
t2 = t4 + 1
heap[t2] = 80
t2 = t4 + 2
heap[t2] = 108
t2 = t4 + 3
heap[t2] = 101
t2 = t4 + 4
heap[t2] = 97
t2 = t4 + 5
heap[t2] = 115
t2 = t4 + 6
heap[t2] = 101
t2 = t4 + 7
heap[t2] = 32
t2 = t4 + 8
heap[t2] = 119
t2 = t4 + 9
heap[t2] = 111
t2 = t4 + 10
heap[t2] = 114
t2 = t4 + 11
heap[t2] = 107
t2 = t4 + 12
heap[t2] = 58
t2 = t4 + 13
heap[t2] = 32
call build_string
t4 = P + 0
t4 = stack[t4]
t4 = stack[t4]
C = C + 1
stack[C] = t4
call get_class
call build_string
right_value = stack[C]
C = C - 1
left_value = stack[C]
C = C - 1
C = C + 1
stack[C] = left_value
C = C + 1
stack[C] = right_value
call sum_strings
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
}
proc ___f___14 {
C = C + 1
stack[C] = 19
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 18
t2 = t4 + 1
heap[t2] = 79
t2 = t4 + 2
heap[t2] = 112
t2 = t4 + 3
heap[t2] = 116
t2 = t4 + 4
heap[t2] = 105
t2 = t4 + 5
heap[t2] = 111
t2 = t4 + 6
heap[t2] = 110
t2 = t4 + 7
heap[t2] = 32
t2 = t4 + 8
heap[t2] = 50
t2 = t4 + 9
heap[t2] = 32
t2 = t4 + 10
heap[t2] = 115
t2 = t4 + 11
heap[t2] = 101
t2 = t4 + 12
heap[t2] = 108
t2 = t4 + 13
heap[t2] = 101
t2 = t4 + 14
heap[t2] = 99
t2 = t4 + 15
heap[t2] = 116
t2 = t4 + 16
heap[t2] = 101
t2 = t4 + 17
heap[t2] = 100
t2 = t4 + 18
heap[t2] = 33
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
}
proc ___f___16 {
C = C + 1
stack[C] = 36
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 35
t2 = t4 + 1
heap[t2] = 69
t2 = t4 + 2
heap[t2] = 118
t2 = t4 + 3
heap[t2] = 101
t2 = t4 + 4
heap[t2] = 114
t2 = t4 + 5
heap[t2] = 116
t2 = t4 + 6
heap[t2] = 104
t2 = t4 + 7
heap[t2] = 105
t2 = t4 + 8
heap[t2] = 110
t2 = t4 + 9
heap[t2] = 103
t2 = t4 + 10
heap[t2] = 32
t2 = t4 + 11
heap[t2] = 115
t2 = t4 + 12
heap[t2] = 101
t2 = t4 + 13
heap[t2] = 101
t2 = t4 + 14
heap[t2] = 109
t2 = t4 + 15
heap[t2] = 115
t2 = t4 + 16
heap[t2] = 32
t2 = t4 + 17
heap[t2] = 116
t2 = t4 + 18
heap[t2] = 111
t2 = t4 + 19
heap[t2] = 32
t2 = t4 + 20
heap[t2] = 98
t2 = t4 + 21
heap[t2] = 101
t2 = t4 + 22
heap[t2] = 32
t2 = t4 + 23
heap[t2] = 119
t2 = t4 + 24
heap[t2] = 111
t2 = t4 + 25
heap[t2] = 114
t2 = t4 + 26
heap[t2] = 107
t2 = t4 + 27
heap[t2] = 105
t2 = t4 + 28
heap[t2] = 110
t2 = t4 + 29
heap[t2] = 103
t2 = t4 + 30
heap[t2] = 32
t2 = t4 + 31
heap[t2] = 102
t2 = t4 + 32
heap[t2] = 105
t2 = t4 + 33
heap[t2] = 110
t2 = t4 + 34
heap[t2] = 101
t2 = t4 + 35
heap[t2] = 33
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
}
proc ___f___3 {
call ___build___Main
t1 = stack[C]
C = C - 1
t4 = P + 0
stack[t4] = t1
C = C + 1
stack[C] = 3
t1 = stack[C]
C = C - 1
t4 = P + 1
stack[t4] = t1
C = C + 1
stack[C] = 0
t1 = stack[C]
C = C - 1
t4 = P + 2
stack[t4] = t1
C = C + 1
stack[C] = 5
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 4
t2 = t4 + 1
heap[t2] = 72
t2 = t4 + 2
heap[t2] = 105
t2 = t4 + 3
heap[t2] = 33
t2 = t4 + 4
heap[t2] = 33
call build_string
t1 = stack[C]
C = C - 1
t4 = P + 3
stack[t4] = t1
t4 = P + 3
t4 = stack[t4]
C = C + 1
stack[C] = t4
C = C + 1
stack[C] = 6
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 5
t2 = t4 + 1
heap[t2] = 72
t2 = t4 + 2
heap[t2] = 105
t2 = t4 + 3
heap[t2] = 33
t2 = t4 + 4
heap[t2] = 33
t2 = t4 + 5
heap[t2] = 33
call build_string
call compare_strings
t1 = stack[C]
C = C - 1
if t1 == 0 goto L55
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___4
P = P - 4
goto L54
L55:
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___6
P = P - 4
L54:
t4 = P + 2
t4 = stack[t4]
C = C + 1
stack[C] = t4
C = C + 1
stack[C] = 0
right_value = stack[C]
C = C - 1
left_value = stack[C]
C = C - 1
if left_value == right_value goto L58
t4 = 0
goto L59
L58:
t4 = 1
L59:
C = C + 1
stack[C] = t4
t1 = stack[C]
C = C - 1
if t1 == 0 goto L57
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___8
P = P - 4
goto L56
L57:
L56:
C = C + 1
stack[C] = 25
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 24
t2 = t4 + 1
heap[t2] = 80
t2 = t4 + 2
heap[t2] = 114
t2 = t4 + 3
heap[t2] = 117
t2 = t4 + 4
heap[t2] = 101
t2 = t4 + 5
heap[t2] = 98
t2 = t4 + 6
heap[t2] = 97
t2 = t4 + 7
heap[t2] = 32
t2 = t4 + 8
heap[t2] = 50
t2 = t4 + 9
heap[t2] = 32
t2 = t4 + 10
heap[t2] = 121
t2 = t4 + 11
heap[t2] = 97
t2 = t4 + 12
heap[t2] = 32
t2 = t4 + 13
heap[t2] = 110
t2 = t4 + 14
heap[t2] = 111
t2 = t4 + 15
heap[t2] = 32
t2 = t4 + 16
heap[t2] = 101
t2 = t4 + 17
heap[t2] = 115
t2 = t4 + 18
heap[t2] = 32
t2 = t4 + 19
heap[t2] = 110
t2 = t4 + 20
heap[t2] = 117
t2 = t4 + 21
heap[t2] = 108
t2 = t4 + 22
heap[t2] = 108
t2 = t4 + 23
heap[t2] = 58
t2 = t4 + 24
heap[t2] = 32
call build_string
t4 = P + 2
t4 = stack[t4]
C = C + 1
stack[C] = t4
t1 = 1
C = C + 1
stack[C] = t1
call get_field
right_value = stack[C]
C = C - 1
left_value = stack[C]
C = C - 1
C = C + 1
stack[C] = left_value
C = C + 1
stack[C] = right_value
t1 = stack[C]
C = C - 1
C = C + 1
stack[C] = t1
call int_to_string
call build_string
call sum_strings
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
t4 = P + 1
t4 = stack[t4]
C = C + 1
stack[C] = t4
C = C + 1
stack[C] = 0
right_value = stack[C]
C = C - 1
left_value = stack[C]
C = C - 1
if left_value == right_value goto L64
t4 = 0
goto L65
L64:
t4 = 1
L65:
C = C + 1
stack[C] = t4
t1 = stack[C]
C = C - 1
if t1 == 0 goto L63
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___10
P = P - 4
goto L62
L63:
t4 = P + 1
t4 = stack[t4]
C = C + 1
stack[C] = t4
C = C + 1
stack[C] = 1
right_value = stack[C]
C = C - 1
left_value = stack[C]
C = C - 1
if left_value == right_value goto L67
t4 = 0
goto L68
L67:
t4 = 1
L68:
C = C + 1
stack[C] = t4
t1 = stack[C]
C = C - 1
if t1 == 0 goto L66
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___12
P = P - 4
goto L62
L66:
t4 = P + 1
t4 = stack[t4]
C = C + 1
stack[C] = t4
C = C + 1
stack[C] = 2
right_value = stack[C]
C = C - 1
left_value = stack[C]
C = C - 1
if left_value == right_value goto L70
t4 = 0
goto L71
L70:
t4 = 1
L71:
C = C + 1
stack[C] = t4
t1 = stack[C]
C = C - 1
if t1 == 0 goto L69
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___14
P = P - 4
goto L62
L69:
P = P + 4
t4 = P - 4
t1 = t4 + 3
t2 = P + 3
stack[t2] = t1
t1 = t4 + 2
t2 = P + 2
stack[t2] = t1
t1 = t4 + 1
t2 = P + 1
stack[t2] = t1
t1 = t4 + 0
t2 = P + 0
stack[t2] = t1
call ___f___16
P = P - 4
L62:
C = C + 1
stack[C] = 28
call malloc
t4 = stack[C]
C = C - 1
C = C + 1
stack[C] = t4
heap[t4] = 27
t2 = t4 + 1
heap[t2] = 73
t2 = t4 + 2
heap[t2] = 102
t2 = t4 + 3
heap[t2] = 83
t2 = t4 + 4
heap[t2] = 116
t2 = t4 + 5
heap[t2] = 109
t2 = t4 + 6
heap[t2] = 116
t2 = t4 + 7
heap[t2] = 32
t2 = t4 + 8
heap[t2] = 115
t2 = t4 + 9
heap[t2] = 111
t2 = t4 + 10
heap[t2] = 108
t2 = t4 + 11
heap[t2] = 118
t2 = t4 + 12
heap[t2] = 101
t2 = t4 + 13
heap[t2] = 100
t2 = t4 + 14
heap[t2] = 32
t2 = t4 + 15
heap[t2] = 115
t2 = t4 + 16
heap[t2] = 117
t2 = t4 + 17
heap[t2] = 99
t2 = t4 + 18
heap[t2] = 99
t2 = t4 + 19
heap[t2] = 101
t2 = t4 + 20
heap[t2] = 115
t2 = t4 + 21
heap[t2] = 115
t2 = t4 + 22
heap[t2] = 102
t2 = t4 + 23
heap[t2] = 117
t2 = t4 + 24
heap[t2] = 108
t2 = t4 + 25
heap[t2] = 108
t2 = t4 + 26
heap[t2] = 121
t2 = t4 + 27
heap[t2] = 33
call build_string
C = C + 1
stack[C] = 0
call get_field
call print_string
print('%c',10)
L53:
}
