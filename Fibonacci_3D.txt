proc Fibonacci{
n = stack[P]
if n!=0 goto L2
stack[P]=0
goto L1
L2:
if n!=1 goto L3
stack[P]=1
goto L1
L3:
n = stack[P]
n = n - 1
P = P + 1
stack[P] = n
call Fibonacci
n1 = stack[P]
P = P - 1
n = stack[P]
stack[P] = n1
n = n - 2
P = P + 1
stack[P] = n
call Fibonacci
n1 = stack[P]
P = P - 1
n = stack[P]
n = n + n1
stack[P] = n
L1:
}

proc Test{

nombre= stack[P]

P = P - 1
P = P + 1
stack[P]=nombre
call printString
t10=10 ;t10 = Valor sobre el cual se caculara Fibonacci.
;En este caso 10. Se puede cambiar por cualquier numero.
P = P + 1
stack[P]=t10
call Fibonacci
res = stack[P]
P = P - 1
print('%e',res)
}

proc new_String{

size= stack[P]

P = P - 1
H=H+1
t11=H
heap[H] = size
H=H+size
P = P + 1
stack[P]=t11
}

proc push_String{

offset= stack[P]

P = P - 1
newChar= stack[P]

P = P - 1
cadena= stack[P]

P = P - 1
t12=cadena+offset
heap[t12] = newChar
}

proc sum_String{

string2= stack[P]

P = P - 1
string1= stack[P]

P = P - 1
size1 = heap[string1]
size2 = heap[string2]
length=size1+size2
H=H+1
t13=H
heap[H] = length
H=H+length
t14=t13
j=string1
i=0
L4:
if i>=size1 goto L2
t14=t14+1
i=i+1
j=j+1
t15 = heap[j]
heap[t14] = t15
goto L4
L5:
j=string2
i=0
L6:
if i>=size2 goto L7
t14=t14+1
i=i+1
j=j+1
t16 = heap[j]
heap[t14] = t16
goto L6
L7:
P = P + 1
stack[P]=t13
}

proc main{

t17=15
P = P + 1
stack[P]=t17
call new_String
title= stack[P]

P = P - 1
P = P + 1
stack[P]=title
P = P + 1
stack[P]=70
P = P + 1
stack[P]=1
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=105
P = P + 1
stack[P]=2
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=98
P = P + 1
stack[P]=3
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=111
P = P + 1
stack[P]=4
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=110
P = P + 1
stack[P]=5
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=97
P = P + 1
stack[P]=6
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=99
P = P + 1
stack[P]=7
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=99
P = P + 1
stack[P]=8
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=105
P = P + 1
stack[P]=9
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=32
P = P + 1
stack[P]=10
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=100
P = P + 1
stack[P]=11
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=101
P = P + 1
stack[P]=12
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=32
P = P + 1
stack[P]=13
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=56
P = P + 1
stack[P]=14
call push_String
P = P + 1
stack[P]=title
P = P + 1
stack[P]=58 ;; 58 = Ascii code of 8
P = P + 1
stack[P]=15
call push_String
P = P + 1
stack[P]=title
call Test
}

proc printString{

cadena= stack[P]

P = P - 1
size = heap[cadena]
t18=0
L8:
if t18>=size goto L9
t18=t18+1
t20=t18+cadena
t21 = heap[t20]
P = P + 1
stack[P]=t21
ren_= stack[P]

P = P - 1
print('%c',ren_)
goto L8
L9:
}
